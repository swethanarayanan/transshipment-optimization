# -*- coding: utf-8 -*-"""Created on Mon Oct 22 14:10:45 2018@author: Group4"""import sysimport mathfrom pulp import *import numpy as npimport pandas as pdimport networkx as nximport matplotlib.pyplot as pltSG_port_fee = 0Port_fee_increment = 100SG_Traffic = []#Increment Port fee till SG volume become Zerowhile(True):    #Define Variable    SG_Type_A = round(SG_port_fee/3)    SG_Type_B = round(SG_port_fee/8)    SG_Type_C = round(SG_port_fee/14)    #Load Data File    port_df = pd.read_csv("Ports.csv")    data_df = pd.read_csv("Data.csv")    #Create Node and Transshipment Hub    Nodes = port_df.Port.unique()    Trans_node = port_df.loc[port_df['Transhipment'] == 'Yes'].Port.unique()    K = data_df["ShipType"].unique()    #Set Transhipment Node Capacity    Trans_node_capacity = port_df.loc[port_df['Transhipment'] == 'Yes']    Trans_node_capacity = Trans_node_capacity.drop(['Transhipment', 'Export', 'Import'], axis=1)    Trans_node_capacity = Trans_node_capacity.set_index('Port').T.to_dict('list')    #Create Nodes and its Supply/Demand    supp_dem = port_df.filter(['Port','Export','Import'], axis=1)    nodeData = supp_dem.set_index('Port').T.to_dict('list')    #Create All possible Arcs    arcs = data_df[['Source', 'Destination', 'ShipType']]    arcs = [tuple(x) for x in arcs.values]    #find cost associated with each Arc together with Demand constraint    cost_capacity = data_df.filter(['Cost', 'minCap'], axis=1)    cost_capacity['Route'] = pd.Series(arcs).values    #Create ArcData    arcData = cost_capacity.set_index('Route').T.to_dict('list')    for key in arcData.keys():        if 'Singapore_hub' in key:            ship_type = str(key).split(',')[2].strip(' ').rstrip('()')            base_cost = str(arcData[key]).strip('[]').split(',')[0]            port_fee = eval('SG_Type_' + eval(ship_type))            total_cost = int(base_cost) + int(port_fee)            arcData[key] = [total_cost,0]    # Splits the dictionaries to be more understandable    (supply, demand) = splitDict(nodeData)    (costs, mins) = splitDict(arcData)    # Creates the boundless Variables as Integers    vars = LpVariable.dicts("Route",arcs,None,None,LpInteger)    # Creates the upper and lower bounds on the variables    for a in arcs:        vars[a].bounds(0, None)            # Creates the 'prob' variable to contain the problem data        prob = LpProblem("Minimum Cost Flow Problem Sample",LpMinimize)    # Creates the objective function    prob += lpSum([vars[a]* costs[a] for a in arcs]), "Total Cost of Transport"    # Creates all problem constraints - this ensures the amount going into each node is     # at least equal to the amount leaving    for n in Nodes:        prob += (supply[n]+ lpSum([vars[(i,j,k)] for (i,j,k) in arcs if j == n]) ==                 demand[n]+ lpSum([vars[(i,j,k)] for (i,j,k) in arcs if i == n])), \                "Flow Conservation in Node %s"%n    for n in Trans_node:        if(n == "Singapore_hub"):            prob += (lpSum([vars[(i,j,k)] for (i,j,k) in arcs if j == n]) <= Trans_node_capacity.get('Singapore_hub'))        if(n == "Malaysia_hub"):            prob += (lpSum([vars[(i,j,k)] for (i,j,k) in arcs if j == n]) <= Trans_node_capacity.get('Malaysia_hub'))    for n in Trans_node:      for ki in K:           prob += 0.8 * lpSum([vars[(i,j,k)] for (i,j,k) in arcs if j == n and k == ki]) <= lpSum([vars[(i,j,k)] for (i,j,k) in arcs if i == n and k == ki])           prob += 1.2 * lpSum([vars[(i,j,k)] for (i,j,k) in arcs if j == n and k == ki]) >= lpSum([vars[(i,j,k)] for (i,j,k) in arcs if i == n and k == ki])    # The problem data is written to an .lp file    prob.writeLP("Transshipment_v2.lp")    # The problem is solved using PuLP's choice of Solver    status = prob.solve()    #Record SG Traffic    SG_Volume = 0    for v in prob.variables():        if ('Singapore' in v.name and v.varValue > 0):            SG_Volume = SG_Volume + float(v.varValue)    SG_Revenue = SG_port_fee * SG_Volume    SG_Traffic.append([SG_port_fee, SG_Volume, SG_Revenue])    if(SG_Volume == 0):        break;    #Increment Port Fee    SG_port_fee = SG_port_fee + Port_fee_incrementprint('\n')print('######################################################################')print('\tVariation in Volume with increase in Port Fee\t')print('######################################################################')max_revenue_start = 0Final_index = []for x in range(len(SG_Traffic)):    print('Singapore Port Fee = ' + str(SG_Traffic[x][0]) + ',' + 'Singapore Volume = ' + str(SG_Traffic[x][1]) + ',' + 'Singapore Revenue = ' + str(SG_Traffic[x][2]))print('\n')print('########################################################')print('Final Port Fee valuation which Generates Max Profit')print('########################################################')print('Maximum Revenue Generated by SG POrt = ', max(l[2] for l in SG_Traffic))